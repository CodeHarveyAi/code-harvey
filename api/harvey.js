const bannedWords = ["crucial", "impact", "outcomes", "pivotal", "significant", "enhancing", "ultimately", "in order to", "vital"];
const toneMap = {
  standard: "Sound like a real college student writing under time pressure. Be clear, readable, slightly imperfect. Avoid robotic rhythm or polished balance.",
  academic: "Use academic tone with realistic sentence variation. Avoid buzzwords. Favor real-world phrasing over generic statements.",
  professional: "Use a polished, plain professional voice. Avoid over-formality or passive structures. Be direct and realistic."
};

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Only POST requests allowed' });
  }

  const { text, tone } = req.body;
  const apiKey = process.env.OPENAI_API_KEY;

  if (!apiKey) {
    return res.status(500).json({ error: 'Missing OpenAI API key' });
  }

  if (!text || text.trim() === "") {
    return res.status(400).json({ error: 'Input text is empty' });
  }

  const styleInstruction = toneMap[tone?.toLowerCase()] || toneMap["standard"];

  const prompt = `
Your name is Harvey. You are a rewriting assistant trained in the Harvey Protocol.

Your job is to rewrite the following passage so that:
- It sounds like it was written by a real human.
- It avoids AI-detected patterns (no mirrored logic, no overly balanced phrasing).
- It varies sentence rhythm and length.
- It does NOT use any of the following banned words or phrases: ${bannedWords.join(", ")}.
- It reflects this tone: ${styleInstruction}
- It includes light emotional realism and subtle natural imperfections.
- The output must NEVER sound like it was generated by AI.

Rewrite the passage below using those rules only.

---

Original:
"${text}"

---

Your rewritten version:
`;

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${apiKey}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: "You are Harvey, a human-like rewriting assistant." },
          { role: "user", content: prompt }
        ],
        temperature: 0.8
      })
    });

    const data = await response.json();

    if (!data.choices || !data.choices[0]?.message?.content) {
      return res.status(500).json({ error: "No choices returned from OpenAI" });
    }

    const rewritten = data.choices[0].message.content.trim();
    return res.status(200).json({ rewrite: rewritten });

  } catch (err) {
    console.error("OpenAI error:", err);
    return res.status(500).json({ error: "Failed to generate response" });
  }
}
